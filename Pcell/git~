
# Constructor Functions

Instead of putting all the required codes within the pcDefinePCell command, it is more common to use a SKILL procedure within pcDefinePCell to create the required shapes. This SKILL procedure is termed as a *constructor/wrapper* function because it "constructs" or “wraps” the body of the SKILL PCell. This is also referred to as PCell code encapsulation.

## lab3_constructor.il
```
procedure( CCScreatePcell3(cv w l layer)
   let( ()
      dbCreateRect(cv list(layer "drawing") list(0:0 w:l))
   ) ;let
) ;procedure
```
## lab3.il
```
pcDefinePCell(
	list(ddGetObj("TestSkill") "pcell3" "layout")
	list((w 0.2) (l 0.1) (layer "MET1"))
	let((cv)
	     cv=pcCellView
	     CCScreatePcell3(cv w l layer)
	   )
)	
```
## lab3_cdf.il
```
let( ( lib cell libId cellId cdfId )
   lib="TestSkill"
   cell="pcell3"

   unless( cellId=ddGetObj(lib cell) error("Could not get cell %s." cell))
   when( cdfId=cdfGetBaseCellCDF(cellId) cdfDeleteCDF(cdfId))
   cdfId=cdfCreateBaseCellCDF(cellId)

   cdfCreateParam( cdfId
       ?name           "layer"
       ?prompt         "layer"
       ?defValue       "MET1"
       ?choices        '("MET1" "MET2" "MET3")
       ?type           "cyclic"
   ) ;cdfCreateParam

   cdfCreateParam( cdfId
       ?name           "l"
       ?prompt         "l"
       ?defValue       0.1
       ?type           "float"
   ) ;cdfCreateParam

   cdfCreateParam( cdfId
       ?name           "w"
       ?prompt         "w"
       ?defValue       0.2
       ?type           "float"
   ) ;cdfCreateParam

    cdfSaveCDF( cdfId )
) ;let
```
![Constructor](images/constructor.jpg)

Advantages of using constructor functions include:
- Modularizes the codes and makes debugging easier
- Allows debugging for the constructor function to be done independently from the PCell itself
- Avoids repeated compilation of the PCell which can take significant time for complex PCells in advanced-node PDKs (The developer can now simply reload the constructor function which is usually placed in a separate file.)

The file containing the constructor functions can be encrypted as a context file to protect the PCell codes.

The new codes with constructor function can be tested by executing the following commands in CIW:
```
load("./scripts/lab3_constructor.il")
load("./scripts/lab3_cdf.il")
load("./scripts/lab3.il")
```
Next, create or open the layout cell "lab3" and place an instance of myCell3 to test it.

The file containing the constructor functions should be loaded first so that they can be used in the subsequent PCell compilation. Otherwise, there will be a PCell evaluation error during compilation.

As the codes that create the PCell are now separated from the pcDefinePCell function and hence, are not compiled directly into the PCell layout, they need to be always loaded once before the PCell can be used.
